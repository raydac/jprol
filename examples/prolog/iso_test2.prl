% Family knowledge base

% Facts
parent(john, mary).
parent(john, paul).
parent(mary, susan).
parent(paul, david).
parent(paul, lisa).
parent(susan, anna).
parent(david, michael).
parent(lisa, emma).

male(john).
male(paul).
male(david).
male(michael).

female(mary).
female(susan).
female(lisa).
female(anna).
female(emma).

% Rules
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.
grandparent(X, Y) :- parent(X, Z), parent(Z, Y).
ancestor(X, Y) :- parent(X, Y).
ancestor(X, Y) :- parent(X, Z), ancestor(Z, Y).
descendant(X, Y) :- ancestor(Y, X).
uncle_or_aunt(X, Y) :- sibling(X, Z), parent(Z, Y).

% List operations
list_length([], 0).
list_length([_|T], N) :- list_length(T, N1), N is N1 + 1.

list_member(X, [X|_]).
list_member(X, [_|T]) :- list_member(X, T).

append_list([], L, L).
append_list([H|T], L, [H|R]) :- append_list(T, L, R).

reverse_list([], []).
reverse_list([H|T], Rev) :- reverse_list(T, RevT), append_list(RevT, [H], Rev).

% Arithmetic operations
factorial(0, 1).
factorial(N, F) :- N > 0, N1 is N - 1, factorial(N1, F1), F is N * F1.

fibonacci(0, 0).
fibonacci(1, 1).
fibonacci(N, F) :- N > 1, N1 is N - 1, N2 is N - 2, fibonacci(N1, F1), fibonacci(N2, F2), F is F1 + F2.

add_todo(Task) :- assertz(todo(Task)).
remove_todo(Task) :- retract(todo(Task)).
clear_todos :- retractall(todo(_)).
list_todos :- forall(todo(Task), writeln(Task)).

% Test program
run_tests :-
    writeln('--- Testing family relationships ---'),
    (   sibling(mary, paul) -> writeln('Mary and Paul are siblings'); writeln('Mary and Paul are not siblings') ),
    (   grandparent(john, susan) -> writeln('John is a grandparent of Susan'); writeln('John is not a grandparent of Susan') ),
    (   ancestor(john, emma) -> writeln('John is an ancestor of Emma'); writeln('John is not an ancestor of Emma') ),
    (   uncle_or_aunt(mary, anna) -> writeln('Mary is an aunt of Anna'); writeln('Mary is not an aunt of Anna') ),

    writeln('--- Testing list operations ---'),
    list_length([a, b, c, d], L), writeln(['Length of [a, b, c, d]:', L]),
    (   list_member(c, [a, b, c, d]) -> writeln('c is in the list [a, b, c, d]'); writeln('c is not in the list [a, b, c, d]') ),
    append_list([1, 2], [3, 4], AppendedList), writeln(['Appended list:', AppendedList]),
    reverse_list([1, 2, 3], ReversedList), writeln(['Reversed list:', ReversedList]),

    writeln('--- Testing factorial ---'),
    factorial(6, F), writeln(['Factorial of 6:', F]),

    writeln('--- Testing Fibonacci ---'),
    fibonacci(10, Fib), writeln(['10th Fibonacci number:', Fib]),

    writeln('--- Testing dynamic predicates ---'),
    add_todo('Learn Prolog'),
    add_todo('Write test program'),
    writeln('Todos before removal:'),
    list_todos,
    remove_todo('Learn Prolog'),
    writeln('Todos after removal:'),
    list_todos,

    writeln('--- Finished running tests ---').

?- run_tests.