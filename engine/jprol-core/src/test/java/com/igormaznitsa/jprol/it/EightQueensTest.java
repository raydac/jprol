package com.igormaznitsa.jprol.it;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

import com.igormaznitsa.jprol.logic.JProlChoicePoint;
import com.igormaznitsa.jprol.logic.JProlContext;
import java.io.StringReader;
import org.junit.jupiter.api.Test;

class EightQueensTest extends AbstractJProlTest {

  @Test
  void testEightQueens() throws Exception {
    final String[] etalonResults = new String[] {
        "[4,2,7,3,6,8,5,1]",
        "[5,2,4,7,3,8,6,1]",
        "[3,5,2,8,6,4,7,1]",
        "[3,6,4,2,8,5,7,1]",
        "[5,7,1,3,8,6,4,2]",
        "[4,6,8,3,1,7,5,2]",
        "[3,6,8,1,4,7,5,2]",
        "[5,3,8,4,7,1,6,2]",
        "[5,7,4,1,3,8,6,2]",
        "[4,1,5,8,6,3,7,2]",
        "[3,6,4,1,8,5,7,2]",
        "[4,7,5,3,1,6,8,2]",
        "[6,4,2,8,5,7,1,3]",
        "[6,4,7,1,8,2,5,3]",
        "[1,7,4,6,8,2,5,3]",
        "[6,8,2,4,1,7,5,3]",
        "[6,2,7,1,4,8,5,3]",
        "[4,7,1,8,5,2,6,3]",
        "[5,8,4,1,7,2,6,3]",
        "[4,8,1,5,7,2,6,3]",
        "[2,7,5,8,1,4,6,3]",
        "[1,7,5,8,2,4,6,3]",
        "[2,5,7,4,1,8,6,3]",
        "[4,2,7,5,1,8,6,3]",
        "[5,7,1,4,2,8,6,3]",
        "[6,4,1,5,8,2,7,3]",
        "[5,1,4,6,8,2,7,3]",
        "[5,2,6,1,7,4,8,3]",
        "[6,3,7,2,8,5,1,4]",
        "[2,7,3,6,8,5,1,4]",
        "[7,3,1,6,8,5,2,4]",
        "[5,1,8,6,3,7,2,4]",
        "[1,5,8,6,3,7,2,4]",
        "[3,6,8,1,5,7,2,4]",
        "[6,3,1,7,5,8,2,4]",
        "[7,5,3,1,6,8,2,4]",
        "[7,3,8,2,5,1,6,4]",
        "[5,3,1,7,2,8,6,4]",
        "[2,5,7,1,3,8,6,4]",
        "[3,6,2,5,8,1,7,4]",
        "[6,1,5,2,8,3,7,4]",
        "[8,3,1,6,2,5,7,4]",
        "[2,8,6,1,3,5,7,4]",
        "[5,7,2,6,3,1,8,4]",
        "[3,6,2,7,5,1,8,4]",
        "[6,2,7,1,3,5,8,4]",
        "[3,7,2,8,6,4,1,5]",
        "[6,3,7,2,4,8,1,5]",
        "[4,2,7,3,6,8,1,5]",
        "[7,1,3,8,6,4,2,5]",
        "[1,6,8,3,7,4,2,5]",
        "[3,8,4,7,1,6,2,5]",
        "[6,3,7,4,1,8,2,5]",
        "[7,4,2,8,6,1,3,5]",
        "[4,6,8,2,7,1,3,5]",
        "[2,6,1,7,4,8,3,5]",
        "[2,4,6,8,3,1,7,5]",
        "[3,6,8,2,4,1,7,5]",
        "[6,3,1,8,4,2,7,5]",
        "[8,4,1,3,6,2,7,5]",
        "[4,8,1,3,6,2,7,5]",
        "[2,6,8,3,1,4,7,5]",
        "[7,2,6,3,1,4,8,5]",
        "[3,6,2,7,1,4,8,5]",
        "[4,7,3,8,2,5,1,6]",
        "[4,8,5,3,1,7,2,6]",
        "[3,5,8,4,1,7,2,6]",
        "[4,2,8,5,7,1,3,6]",
        "[5,7,2,4,8,1,3,6]",
        "[7,4,2,5,8,1,3,6]",
        "[8,2,4,1,7,5,3,6]",
        "[7,2,4,1,8,5,3,6]",
        "[5,1,8,4,2,7,3,6]",
        "[4,1,5,8,2,7,3,6]",
        "[5,2,8,1,4,7,3,6]",
        "[3,7,2,8,5,1,4,6]",
        "[3,1,7,5,8,2,4,6]",
        "[8,2,5,3,1,7,4,6]",
        "[3,5,2,8,1,7,4,6]",
        "[3,5,7,1,4,2,8,6]",
        "[5,2,4,6,8,3,1,7]",
        "[6,3,5,8,1,4,2,7]",
        "[5,8,4,1,3,6,2,7]",
        "[4,2,5,8,6,1,3,7]",
        "[4,6,1,5,2,8,3,7]",
        "[6,3,1,8,5,2,4,7]",
        "[5,3,1,6,8,2,4,7]",
        "[4,2,8,6,1,3,5,7]",
        "[6,3,5,7,1,4,2,8]",
        "[6,4,7,1,3,5,2,8]",
        "[4,7,5,2,6,1,3,8]",
        "[5,7,2,6,3,1,4,8]"};

    // check the knowledge base export data process
    //--
    final JProlContext context = makeTestContext();
    context.consult(new StringReader(
        "solution([]). " +
            "solution([X/Y|Others]) :- solution(Others), member(Y,[1,2,3,4,5,6,7,8]), notattack(X/Y,Others). " +
            "notattack(_,[]). " +
            "notattack(X/Y,[X1/Y1 | Others]):- Y=\\=Y1, Y1-Y=\\=X1-X, Y1-Y=\\=X-X1, notattack(X/Y,Others). " +
            "template([1/Y1,2/Y2,3/Y3,4/Y4,5/Y5,6/Y6,7/Y7,8/Y8])."
    ));
    final JProlChoicePoint goal = new JProlChoicePoint(
        "solution([1/Y1,2/Y2,3/Y3,4/Y4,5/Y5,6/Y6,7/Y7,8/Y8]),Res = [Y1,Y2,Y3,Y4,Y5,Y6,Y7,Y8].",
        context);

    for (final String e : etalonResults) {
      assertNotNull(goal.prove());
      assertEquals(e, getVarAsText(goal, "Res"));
    }
    assertNull(goal.prove());
  }
}
